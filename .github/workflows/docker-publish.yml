##Teste GitActions
name: Docker Build and Publish

on:
  push:
    branches: [ "development" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate semantic version
        id: version
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Extrair os números da versão
          major=$(echo $latest_tag | cut -d. -f1 | tr -d 'v')
          minor=$(echo $latest_tag | cut -d. -f2)
          patch=$(echo $latest_tag | cut -d. -f3)
          
          # Verificar commits desde a última tag
          commits=$(git log $latest_tag..HEAD --pretty=format:"%s")
          
          # Determinar tipo de mudança baseado nas mensagens de commit
          if echo "$commits" | grep -iE "BREAKING|MAJOR"; then
            major=$((major + 1))
            minor=0
            patch=0
          elif echo "$commits" | grep -iE "feat|feature|MINOR"; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi
          
          # Adicionar sufixo -dev para branch development
          if [[ "${{ github.ref }}" == "refs/heads/development" ]]; then
            new_version="v$major.$minor.$patch-dev"
          else
            new_version="v$major.$minor.$patch"
          fi
          
          echo "NEW_VERSION=${new_version}" >> $GITHUB_ENV
          echo "version=${new_version}" >> $GITHUB_OUTPUT

      - name: Build and test
        id: build
        run: |
          npm ci
          npm run build
          npm test || exit 1

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref == 'refs/heads/development' && 'development' || 'latest' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create Git tag
        if: success() && github.ref == 'refs/heads/main'
        run: |
          git tag ${{ steps.version.outputs.version }}
          git push origin ${{ steps.version.outputs.version }}

      - name: Auto-merge to main
        if: success() && github.event_name == 'pull_request'
        run: |
          gh pr merge ${{ github.event.pull_request.number }} --merge --auto
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send email notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "[${{ github.repository }}] Build ${{ job.status }} - ${{ github.ref_name }} - Version ${{ steps.version.outputs.version }}"
          body: |
            Status da Build: ${{ job.status }}
            Branch: ${{ github.ref_name }}
            Versão: ${{ steps.version.outputs.version }}
            
            Detalhes:
            - Repositório: ${{ github.repository }}
            - Commit: ${{ github.sha }}
            - Autor: ${{ github.actor }}
            
            Para mais detalhes, acesse:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: ${{ secrets.MAIL_FROM }} 