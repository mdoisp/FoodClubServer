##Teste GitActions
name: CI/CD Pipeline

on:
  push:
    branches: 
      - "development"
      - "main"
  pull_request:
    branches:
      - "main"
      - "development"

env:
  DOCKER_HUB_REPOSITORY: ${{ secrets.DOCKER_HUB_USERNAME }}/foodclub-server
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'

jobs:
  test:
    name: Testes e Lint
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: foodclub_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Run unit tests
        run: npm run test
        
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/foodclub_test

  version:
    needs: [test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development')
    name: Gerar Versão
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate semantic version
        id: version
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          if [ "$latest_tag" = "v0.0.0" ] && [ ! -f .version-initialized ]; then
            git tag v0.0.0
            touch .version-initialized
          fi
          
          major=$(echo $latest_tag | cut -d. -f1 | tr -d 'v')
          minor=$(echo $latest_tag | cut -d. -f2)
          patch=$(echo $latest_tag | cut -d. -f3)
          
          if git rev-list $latest_tag..HEAD --count > /dev/null 2>&1; then
            commits=$(git log $latest_tag..HEAD --pretty=format:"%s")
          else
            commits=""
          fi
          
          if [ -n "$commits" ]; then
            if echo "$commits" | grep -iE "BREAKING|MAJOR"; then
              major=$((major + 1))
              minor=0
              patch=0
            elif echo "$commits" | grep -iE "feat|feature|MINOR"; then
              minor=$((minor + 1))
              patch=0
            else
              patch=$((patch + 1))
            fi
          fi
          
          if [[ "${{ github.ref }}" == "refs/heads/development" ]]; then
            new_version="v$major.$minor.$patch-dev"
          else
            new_version="v$major.$minor.$patch"
          fi
          
          echo "NEW_VERSION=${new_version}" >> $GITHUB_ENV
          echo "version=${new_version}" >> $GITHUB_OUTPUT

  build-and-push:
    name: Build e Push das Imagens
    needs: [test, version]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          security-checks: 'vuln,config,secret'
          severity: 'CRITICAL,HIGH'
          
      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_HUB_REPOSITORY }}:${{ needs.version.outputs.new_version }}
            ${{ env.DOCKER_HUB_REPOSITORY }}:${{ github.ref == 'refs/heads/development' && 'development' || 'latest' }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.version.outputs.new_version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref == 'refs/heads/development' && 'development' || 'latest' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create Git tag
        if: success() && github.ref == 'refs/heads/main'
        run: |
          git tag ${{ needs.version.outputs.new_version }}
          git push origin ${{ needs.version.outputs.new_version }}

  notify:
    name: Notificações
    needs: [test, build-and-push, version]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Determinar Status
        id: status
        run: |
          if [[ "${{ needs.test.result }}" == "failure" ]]; then
            echo "message=❌ Falha nos testes" >> $GITHUB_OUTPUT
            echo "status=Falha" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.build-and-push.result }}" == "failure" ]]; then
            echo "message=❌ Falha no build/push" >> $GITHUB_OUTPUT
            echo "status=Falha" >> $GITHUB_OUTPUT
          else
            echo "message=✅ Pipeline concluído com sucesso" >> $GITHUB_OUTPUT
            echo "status=Sucesso" >> $GITHUB_OUTPUT
          fi

      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "[${{ github.repository }}] ${{ steps.status.outputs.message }} - ${{ github.ref_name }} - ${{ needs.version.outputs.new_version }}"
          body: |
            Status: ${{ steps.status.outputs.status }}
            Branch: ${{ github.ref_name }}
            Versão: ${{ needs.version.outputs.new_version }}
            
            Detalhes:
            - Repositório: ${{ github.repository }}
            - Commit: ${{ github.sha }}
            - Autor: ${{ github.actor }}
            - Testes: ${{ needs.test.result }}
            - Build/Push: ${{ needs.build-and-push.result }}
            
            Imagens Docker:
            - Docker Hub: ${{ env.DOCKER_HUB_REPOSITORY }}:${{ needs.version.outputs.new_version }}
            - GitHub Registry: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.version.outputs.new_version }}
            
            Para mais detalhes, acesse:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: ${{ secrets.MAIL_FROM }} 